\ProvidesExplPackage{magicwatermark}{2024/06/11}{v1.0.1}{magic watermark, author}

\RequirePackage{tikz, everypage-1x}

\seq_new:N \l__mw_tmpa_seq 
\seq_new:N \l__mw_tmpb_seq 
\seq_new:N \l__mw_tmpc_seq 
\seq_new:N \l__mw_tmpd_seq 


\int_new:N \l__mw_tmpa_int 
\int_new:N \l__mw_tmpb_int 
\int_new:N \l__mw_tmpc_int 
\int_new:N \l__mw_tmpd_int 
\int_new:N \l__mw_tmpe_int 

\clist_new:N \l__mw_list_arabic_number_clist 
\clist_new:N \l__mw_list_roman_number_clist 
\clist_new:N \l__mw_list_range_clist 
\clist_new:N \l__mw_list_expression_clist

\clist_new:N \l__mw_tmpa_clist
\clist_new:N \l__mw_tmpb_clist
\clist_new:N \l__mw_tmpc_clist


\regex_const:Nn \c__mw_arabic_numbers_regex { ^\d+$ }
\regex_const:Nn \c__mw_roman_numbers_regex { ^[ivxlcdm]+$ }



\int_new:N \g__mw_last_page_int 

\AtBeginDocument{
  \int_compare:nTF { \@abspage@last = \number\maxdimen }
  {
    \int_gset:Nn \g__mw_last_page_int { 10 }
  }
  {
    \int_gset:Nn \g__mw_last_page_int { \@abspage@last }
  }
}

\cs_new_protected:Npn \__mw_clist_deduplicate:N #1
{
  \clist_clear:N \l_tmpa_clist
  \clist_map_inline:Nn #1
  {
    \clist_if_in:NnF \l_tmpa_clist { ##1 }
      { \clist_put_right:Nn \l_tmpa_clist { ##1 } }
  }
  \clist_set_eq:NN #1 \l_tmpa_clist
}


\cs_new:Npn \__mw_list_parser_aux:n #1 {
  % split by commas
  \seq_set_split:Nnn \l__mw_tmpa_seq { , } { #1 }
  \seq_map_inline:Nn \l__mw_tmpa_seq
  {
    \tl_if_eq:nnTF { ##1 } { odd } % odd, push 2X + 1
    {
      \clist_put_right:Nn \l__mw_list_expression_clist  { 2X + 1 }
    }
    {
      \tl_if_eq:nnTF { ##1 } { even } % even, push 2X
      {
        \clist_put_right:Nn \l__mw_list_expression_clist  { 2X + 0 }
      }
      {
        \tl_if_in:nnTF { ##1 } { X } % expression, push ##1
        {
          \clist_put_right:Nn \l__mw_list_expression_clist { ##1 }
        }
        {
          \tl_if_in:nnTF { ##1 } { - } % range, push ##1
          {
            \clist_put_right:Nn \l__mw_list_range_clist { ##1 }
          }
          {
            \__mw_if_arabic_number:nTF { ##1 }
            {
              \clist_put_right:Nn \l__mw_list_arabic_number_clist { ##1 }
            }
            {
              \__mw_if_roman_number:nTF { ##1 }
              {
                \clist_put_right:Nn \l__mw_list_roman_number_clist { ##1 }
              }
              {
                % error
                error~para~``##1'',
              }
            }
          }
        }
      }
    }
  }
}


\prg_new_conditional:Npnn \__mw_if_arabic_number:n #1 { p, T, F, TF }
{
  \regex_match:NnTF \c__mw_arabic_numbers_regex { #1 }
  {
    \prg_return_true:
  }
  {
    \prg_return_false:
  }
}

\prg_new_conditional:Npnn \__mw_if_roman_number:n #1 { p, T, F, TF }
{
  \regex_match:NnTF \c__mw_roman_numbers_regex { #1 }
  {
    \prg_return_true:
  }
  {
    \prg_return_false:
  }
}

\prg_generate_conditional_variant:Nnn \__mw_if_arabic_number:n { x } {p, T, F, TF}
\prg_generate_conditional_variant:Nnn \__mw_if_roman_number:n { x } {p, T, F, TF}

% \cs_generate_variant:Nn \int_from_roman:n { x }

\cs_new:Npn \__mw_list_parser_for_arabic_number:n #1 {
  % arabic number
  \fp_compare:nTF { #1 < \g__mw_last_page_int && #1 > 0 }
  {
    \clist_put_right:Nn \l__mw_tmpa_clist { #1 }
  }
  {
    % error
    error~number~`#1',
  }
}



\cs_new:Npn \__mw_list_parser_for_roman_number:n #1 {
  % roman number
  \int_set:Nn \l__mw_tmpa_int { \g__mw_last_page_int - \int_from_roman:n { #1 } }
  \fp_compare:nTF 
  {
     \l__mw_tmpa_int < \g__mw_last_page_int && \l__mw_tmpa_int > 0 
  }
  {
    \clist_put_right:NV \l__mw_tmpa_clist \l__mw_tmpa_int
  }
  {
    % error
    error~roman~`#1',
  }
}


\cs_new:Npn \__mw_list_parser_for_range:n #1 {
  % range, 1-5, 3-i
  \seq_set_split:Nnn \l__mw_tmpb_seq { - } { #1 }

  \__mw_if_arabic_number:xTF { \seq_item:Nn \l__mw_tmpb_seq { 1 } } 
  {
    \int_set:Nn \l__mw_tmpb_int { \seq_item:Nn \l__mw_tmpb_seq { 1 } }
  }
  {
    \__mw_if_roman_number:xTF { \seq_item:Nn \l__mw_tmpb_seq { 1 } } 
    {
      \exp_args:NNx \int_set:Nn \l__mw_tmpb_int 
      {
        \g__mw_last_page_int - \exp_not:N \int_from_roman:n { \seq_item:Nn \l__mw_tmpb_seq { 1 } }
      }
    }
    {
      \int_set:Nn \l__mw_tmpb_int { -1 }
      % error
      error~range~left~`#1',
    }
  }

  \__mw_if_arabic_number:xTF { \seq_item:Nn \l__mw_tmpb_seq { 2 } } 
  {
    \int_set:Nn \l__mw_tmpc_int { \seq_item:Nn \l__mw_tmpb_seq { 2 } }
  }
  {
    \__mw_if_roman_number:xTF { \seq_item:Nn \l__mw_tmpb_seq { 2 } } 
    {
      \exp_args:NNx \int_set:Nn \l__mw_tmpc_int 
      {
        \g__mw_last_page_int - \exp_not:N \int_from_roman:n { \seq_item:Nn \l__mw_tmpb_seq { 2 } }
      }
    }
    {
      \int_set:Nn \l__mw_tmpc_int { -1 }
      % error
      error~range~right~`#1',
    }
  }

  \fp_compare:nT { \l__mw_tmpb_int > 0 && \l__mw_tmpc_int > 0} 
  {
    \int_step_inline:nnn 
    { \int_min:nn { \l__mw_tmpb_int } { \l__mw_tmpc_int } }
    { \int_max:nn { \l__mw_tmpb_int } { \l__mw_tmpc_int } }
    {
      \clist_put_right:Nn \l__mw_tmpa_clist { ##1 }
    }
  }
}

\cs_new:Npn \__mw_list_parser_for_expression_aux:w #1X + #2 \scan_stop: {
  \clist_clear:N \l__mw_tmpb_clist
  \__mw_if_arabic_number:nTF { #1 }
  {
    \__mw_if_arabic_number:nTF { #2 }
    {
      \clist_set:Nn \l__mw_tmpb_clist {#1, #2}
    }
    {
      error~expression~`#1X + #2',
    }
  }
  {
    error~expression~`#1X + #2',
  }

} 

\cs_new:Npn \__mw_list_parser_for_expression:n #1 {
  \__mw_list_parser_for_expression_aux:w #1\scan_stop:

  \int_zero:N \l__mw_tmpd_int
  \int_zero:N \l__mw_tmpe_int

  \clist_if_empty:NF \l__mw_tmpb_clist 
  {
    \int_while_do:nn { \l__mw_tmpd_int < \g__mw_last_page_int } 
    {
      \int_set:Nn \l__mw_tmpd_int 
      { 
        \clist_item:Nn \l__mw_tmpb_clist {1} * \l__mw_tmpe_int +
        \clist_item:Nn \l__mw_tmpb_clist {2}
      }
      \clist_put_right:NV \l__mw_tmpa_clist \l__mw_tmpd_int 
      \int_incr:N \l__mw_tmpe_int
    }
  }
}


\cs_new_nopar:Npn \__mw_list_parser:nN #1#2 {

  % case 1 -> odd, even
  % case 2 -> number, 1
  % case 3 -> roman, i
  % case 4 -> range, 1-5, 3-ii
  % case 5 -> expression, 3X + 1
  \clist_clear:N \l__mw_list_arabic_number_clist 
  \clist_clear:N \l__mw_list_roman_number_clist 
  \clist_clear:N \l__mw_list_range_clist 
  \clist_clear:N \l__mw_list_expression_clist
  \clist_clear:N \l__mw_tmpa_clist 
  \__mw_list_parser_aux:n { #1 }

  \clist_map_inline:Nn \l__mw_list_arabic_number_clist
  {
    \__mw_list_parser_for_arabic_number:n { ##1 }
  }

  \clist_map_inline:Nn \l__mw_list_roman_number_clist 
  {
    \__mw_list_parser_for_roman_number:n { ##1 }
  }


  \clist_map_inline:Nn \l__mw_list_range_clist 
  {
    \__mw_list_parser_for_range:n { ##1 }
  }
  

  \clist_map_inline:Nn \l__mw_list_expression_clist 
  {
    \__mw_list_parser_for_expression:n { ##1 }
  }


  \clist_sort:Nn \l__mw_tmpa_clist {
    \int_compare:nNnTF { ##1 } > { ##2 }
    { \sort_return_swapped: }
    { \sort_return_same: }
  }
  \__mw_clist_deduplicate:N \l__mw_tmpa_clist
  \clist_set_eq:NN #2 \l__mw_tmpa_clist
}


\cs_new:Npn \__mw_parser:nn #1#2 {
  % \__mw_list_parser:nN { #1 } \l__mw_tmpc_clist
  \clist_clear:N \l__mw_tmpc_clist
  \tl_if_eq:nnTF { #1 } { * } 
  {
    \int_step_inline:nnn { 1 } { \g__mw_last_page_int }
    {
      \clist_put_right:Nn \l__mw_tmpc_clist { ##1 }
    }
  }
  {
    \__mw_list_parser:nN { #1 } \l__mw_tmpc_clist
  }

  \clist_map_inline:Nn \l__mw_tmpc_clist {
    \tl_gset:cn { g__mw_content_ \int_to_roman:n { ##1 } _tl} { #2 }
  }
}


\NewDocumentCommand{\MagicWatermark}{m+m}{
  \AtBeginDocument{
    \__mw_parser:nn {#1} {#2}
    \AddEverypageHook{
      \tikz[remember~picture, overlay] \node[inner~sep = 0pt, outer~sep = 0pt, opacity = .75] at (current~page.center) {
        \tl_if_exist:cT { g__mw_content_ \int_to_roman:n { \value{page} }_tl }
        {
          \tl_use:c { g__mw_content_ \int_to_roman:n { \value{page} } _tl }
        }
      };
    }
  }
}


